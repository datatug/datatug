package filestore

import (
	"fmt"
	"github.com/datatug/datatug/packages/models"
	"os"
	"path"
	"strings"
)

func (s FileSystemSaver) writeTableReadme(dirPath string, table *models.Table) func() error {
	return func() error {
		file, _ := os.OpenFile(path.Join(dirPath, "README.md"), os.O_CREATE, os.ModePerm)
		defer func() {
			_ = file.Close()
		}()
		var primaryKey string
		if table.PrimaryKey == nil {
			primaryKey = "*None*"
		} else {
			pkCols := make([]string, len(table.PrimaryKey.Columns))
			for i, pkCol := range table.PrimaryKey.Columns {
				pkCols[i] = fmt.Sprintf("**%v**", pkCol)
			}
			primaryKey = fmt.Sprintf("%v (%v)", table.PrimaryKey.Name, strings.Join(pkCols, ", "))
		}

		var foreignKeys string
		if len(table.ForeignKeys) == 0 {
			foreignKeys = "*None*"
		} else {
			fks := make([]string, len(table.ForeignKeys))
			for i, fk := range table.ForeignKeys {
				fks[i] = fmt.Sprintf("- %v (%v) `REFERENCES` [%v](../../../%v).[%v](../../../%v/tables/%v)",
					fk.Name,
					fmt.Sprintf("**%v**", strings.Join(fk.Columns, "**, **")),
					fk.RefTable.Schema, fk.RefTable.Schema, fk.RefTable.Name,
					fk.RefTable.Schema, fk.RefTable.Name,
				)
			}
			foreignKeys = strings.Join(fks, "\n")
		}

		var referencedBy string
		if len(table.ReferencedBy) == 0 {
			referencedBy = "*None*"
		} else {
			refBys := make([]string, len(table.ReferencedBy))
			for i, refBy := range table.ReferencedBy {
				refBys[i] = fmt.Sprintf("- [%v](../../../%v).[%v](../../../%v/tables/%v)", refBy.Schema, refBy.Schema, refBy.Name, refBy.Schema, refBy.Name)
			}
			referencedBy = strings.Join(refBys, "\n")
		}

		columns := make([]string, len(table.Columns))
		for i, c := range table.Columns {
			columns[i] = fmt.Sprintf("- `%v` %v", c.Name, c.DbType)
		}
		_, err := fmt.Fprintf(file, `# Table: [%v](..).%v

## Primary key
%v

## Foreign keys
%v

## Refenced by
%v

## Columns
%v

> Generated by free [DataTug.app](https://datatug.app)
`, table.Schema, table.Name, primaryKey, foreignKeys, referencedBy, strings.Join(columns, "\n"))
		return err
	}
}

func (s FileSystemSaver) writeProjectReadme(project models.DataTugProject) error {
	file, _ := os.OpenFile(path.Join(s.path, DatatugFolder, "README.md"), os.O_CREATE, os.ModePerm)
	defer func() {
		_ = file.Close()
	}()

	dbModels := make([]string, len(project.DbModels))
	for i, dbModel := range project.DbModels {
		dbModels[i] = fmt.Sprintf("- [%v](dbmodels/%v)", dbModel.ID, dbModel.ID)
	}

	environments := make([]string, len(project.Environments))
	for i, environment := range project.Environments {
		environments[i] = fmt.Sprintf("- [%v](dbmodels/%v)", environment.ID, environment.ID)
	}

	boards := make([]string, len(project.Boards))
	for i, board := range project.Boards {
		environments[i] = fmt.Sprintf("- [%v](boards/%v)", board.Title, board.ID)
	}

	_, err := fmt.Fprintf(file, `# DataTug project: %v

## Project UUID
%v

## [Database models](dbmodels) - %v
%v

## [Environments](environments/) - %v
%v

## [Boards](boards/) - %v
%v

> Generated by [DataTug.app](https://datatug.app)
`,
		project.Title,
		project.ID,
		strings.Join(dbModels, "\n"), len(dbModels),
		strings.Join(environments, "\n"), len(environments),
		strings.Join(boards, "\n"), len(boards),
	)
	if err != nil {
		return err
	}
	return nil
}
